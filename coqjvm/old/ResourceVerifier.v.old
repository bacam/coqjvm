Require Import GenericVerifierIface.
Require Import ClassDatatypesIface.
Require Import ILLInterfaces.
Require Import BasicMachineTypes.
Require Import OptionMonad.
Require Import OptionExt.
Require Import ClasspoolIface.
Require Import CertRuntimeTypesIface.
Require Import List.
Require Import Execution.

Module ResourceVerifierOuter
        (B : BASICS)
        (SYN : ILL_SYNTAX with Module SYN.B := B)
        (CERT : CERTIFICATE with Module SYN := SYN)
        (ANN : ILLANNOTATIONS with Module B:= B with Module SYN := SYN with Module CERT := CERT)
        (RA : RESOURCE_ALGEBRA with Module B := B)
        (C : CLASSDATATYPES with Module B := B with Module A := ANN)
        (CP : CLASSPOOL with Module B := B with Module C := C)
        (RT : CERTRUNTIMETYPES with Module B := B with Module C := C with Module CP := CP)
        (RSEM : ILL_SEMANTICS with Module RA := RA with Module SYN := SYN).

Inductive static_method_ref_resolvable : CP.cert_classpool -> CP.Preclasspool.t -> B.Classname.t -> B.Classname.t -> B.Methodname.t -> C.descriptor -> Prop :=
| mk_static_method_ref_resolvable : forall caller c_nm m_nm m_desc classes preclasses classes' p o c m H code,
    CP.resolve_method caller c_nm m_nm m_desc classes preclasses = CP.load_ok _ (classes':=classes') p o (c,m) H ->
    C.method_static m = true ->
    C.method_code m = Some code ->
    static_method_ref_resolvable classes preclasses caller c_nm m_nm m_desc.

Inductive instance_special_method_ref_resolvable : CP.cert_classpool -> CP.Preclasspool.t -> B.Classname.t -> B.Classname.t -> B.Methodname.t -> C.descriptor -> Prop :=
| mk_instance_special_method_ref_resolvable : forall caller c_nm m_nm m_desc classes preclasses classes' p o c m H code,
    CP.resolve_method caller c_nm m_nm m_desc classes preclasses = CP.load_ok _ (classes':=classes') p o (c,m) H ->
    C.method_static m = false ->
    C.method_abstract m = false ->
    C.method_code m = Some code ->
    instance_special_method_ref_resolvable classes preclasses caller c_nm m_nm m_desc.

Inductive instance_method_ref_resolvable : CP.cert_classpool -> CP.Preclasspool.t -> B.Classname.t -> B.Classname.t -> B.Methodname.t -> C.descriptor -> Prop :=
| mk_instance_method_ref_resolvable : forall caller c_nm m_nm m_desc classes preclasses classes' p o c m H,
    CP.resolve_method caller c_nm m_nm m_desc classes preclasses = CP.load_ok _ (classes':=classes') p o (c,m) H ->
    C.method_static m = false ->
    instance_method_ref_resolvable classes preclasses caller c_nm m_nm m_desc.

Inductive static_field_ref_resolvable : CP.cert_classpool -> CP.Preclasspool.t -> B.Classname.t -> B.Classname.t -> B.Fieldname.t -> C.java_type -> Prop :=
| mk_static_field_ref_resolvable : forall caller c_nm f_nm f_ty classes preclasses classes' p o c f H,
    CP.resolve_field caller c_nm f_nm f_ty classes preclasses = CP.load_ok _ (classes':=classes') p o (c,f) H ->
    C.field_static f = true ->
    static_field_ref_resolvable classes preclasses caller c_nm f_nm f_ty.

Inductive instance_field_ref_resolvable : CP.cert_classpool -> CP.Preclasspool.t -> B.Classname.t -> B.Classname.t -> B.Fieldname.t -> C.java_type -> Prop :=
| mk_instance_field_ref_resolvable : forall caller c_nm f_nm f_ty classes preclasses classes' p o c f H,
    CP.resolve_field caller c_nm f_nm f_ty classes preclasses = CP.load_ok _ (classes':=classes') p o (c,f) H ->
    C.field_static f = false ->
    C.field_final f = false ->
    instance_field_ref_resolvable classes preclasses caller c_nm f_nm f_ty.

Inductive instantiatable_class_ref_resolvable : CP.cert_classpool -> CP.Preclasspool.t -> B.Classname.t -> B.Classname.t -> Prop :=
| mk_instantiatable_class_ref_resolvable : forall caller c_nm classes preclasses classes' p o c H,
    CP.resolve_class caller c_nm classes preclasses = CP.load_ok _ (classes':=classes') p o c H ->
    C.class_interface c = false ->
    C.class_abstract c = false ->
    instantiatable_class_ref_resolvable classes preclasses caller c_nm.

Inductive class_ref_resolvable : CP.cert_classpool -> CP.Preclasspool.t -> B.Classname.t -> B.Classname.t -> Prop :=
| mk_class_ref_resolvable : forall caller c_nm classes preclasses classes' p o c H,
    CP.resolve_class caller c_nm classes preclasses = CP.load_ok _ (classes':=classes') p o c H ->
    class_ref_resolvable classes preclasses caller c_nm.

Inductive all_resolvable_for_class : CP.cert_classpool -> CP.Preclasspool.t -> C.class -> Prop :=
| mk_all_resolvable_for_class : forall classes preclasses class,
    (forall cp_idx c_nm m_nm m_desc,
       C.ConstantPool.lookup (C.class_constantpool class) cp_idx = Some (C.cpe_methodref c_nm m_nm m_desc) ->
       C.A.ConstantPoolAdditional.lookup (snd (C.class_annotation class)) cp_idx = Some (C.A.cpae_static_method) ->
       static_method_ref_resolvable classes preclasses (C.class_name class) c_nm m_nm m_desc) ->
    (forall cp_idx c_nm m_nm m_desc,
       C.ConstantPool.lookup (C.class_constantpool class) cp_idx = Some (C.cpe_methodref c_nm m_nm m_desc) ->
       C.A.ConstantPoolAdditional.lookup (snd (C.class_annotation class)) cp_idx = Some (C.A.cpae_instance_special_method) ->
       instance_special_method_ref_resolvable classes preclasses (C.class_name class) c_nm m_nm m_desc) ->
    (forall cp_idx c_nm m_nm m_desc,
       C.ConstantPool.lookup (C.class_constantpool class) cp_idx = Some (C.cpe_methodref c_nm m_nm m_desc) ->
       C.A.ConstantPoolAdditional.lookup (snd (C.class_annotation class)) cp_idx = Some (C.A.cpae_instance_method) ->
       instance_method_ref_resolvable classes preclasses (C.class_name class) c_nm m_nm m_desc) ->
    (forall cp_idx c_nm f_nm f_ty,
       C.ConstantPool.lookup (C.class_constantpool class) cp_idx = Some (C.cpe_fieldref c_nm f_nm f_ty) ->
       C.A.ConstantPoolAdditional.lookup (snd (C.class_annotation class)) cp_idx = Some (C.A.cpae_static_field) ->
       static_field_ref_resolvable classes preclasses (C.class_name class) c_nm f_nm f_ty) ->
    (forall cp_idx c_nm,
       C.ConstantPool.lookup (C.class_constantpool class) cp_idx = Some (C.cpe_classref c_nm) ->
          class_ref_resolvable classes preclasses (C.class_name class) c_nm
       /\ (C.A.ConstantPoolAdditional.lookup (snd (C.class_annotation class)) cp_idx = Some (C.A.cpae_instantiable_class) ->
           instantiatable_class_ref_resolvable classes preclasses (C.class_name class) c_nm)) ->
    (forall cp_idx c_nm f_nm f_ty,
       C.ConstantPool.lookup (C.class_constantpool class) cp_idx = Some (C.cpe_fieldref c_nm f_nm f_ty) ->
       C.A.ConstantPoolAdditional.lookup (snd (C.class_annotation class)) cp_idx = Some (C.A.cpae_instance_field) ->
       instance_field_ref_resolvable classes preclasses (C.class_name class) c_nm f_nm f_ty) ->
    all_resolvable_for_class classes preclasses class.

Inductive all_resolvable_and_verified : CP.cert_classpool -> CP.Preclasspool.t -> Prop :=
| mk_all_resolvable_and_verified : forall classes preclasses,
    (forall c_nm c,
       CP.Classpool.lookup (CP.classpool classes) c_nm = Some c ->
       all_resolvable_for_class classes preclasses c) ->
    (forall c_nm pc,
       CP.Preclasspool.lookup preclasses c_nm = Some pc ->
       all_resolvable_for_class classes preclasses (CP.preclass_to_class pc)) ->
    all_resolvable_and_verified classes preclasses.

Lemma preserve_static_method_resolvable : forall classesA classesB preclasses caller c_nm m_nm m_desc,
  static_method_ref_resolvable classesA preclasses caller c_nm m_nm m_desc ->
  CP.preserve_old_classes classesA classesB ->
  CP.only_add_from_preclasses classesA classesB preclasses ->
  static_method_ref_resolvable classesB preclasses caller c_nm m_nm m_desc.
intros classesA classesB preclasses caller c_nm m_nm m_desc [caller' c_nm' m_nm' m_desc' classes preclasses' classes' p o c m H code m_resolved m_static m_code] preserve only_add.
destruct (CP.preserve_resolve_method _ _ _ _ _ _ _ _ _ _ _ _ m_resolved preserve only_add) as [classesB' [pB [oB [HB m_resolve2]]]].
eapply mk_static_method_ref_resolvable; eauto.
Save.

Lemma preserve_instance_special_method_resolvable : forall classesA classesB preclasses caller c_nm m_nm m_desc,
  instance_special_method_ref_resolvable classesA preclasses caller c_nm m_nm m_desc ->
  CP.preserve_old_classes classesA classesB ->
  CP.only_add_from_preclasses classesA classesB preclasses ->
  instance_special_method_ref_resolvable classesB preclasses caller c_nm m_nm m_desc.
intros classesA classesB preclasses caller c_nm m_nm m_desc [caller' c_nm' m_nm' m_desc' classes preclasses' classes' p o c m H code m_resolve not_static not_abstract m_code] preserve only_add.
destruct (CP.preserve_resolve_method _ _ _ _ _ _ _ _ _ _ _ _ m_resolve preserve only_add) as [classesB' [pB [oB [HB m_resolve2]]]].
eapply mk_instance_special_method_ref_resolvable; eauto. 
Save.

Lemma preserve_instance_method_resolvable : forall classesA classesB preclasses caller c_nm m_nm m_desc,
  instance_method_ref_resolvable classesA preclasses caller c_nm m_nm m_desc ->
  CP.preserve_old_classes classesA classesB ->
  CP.only_add_from_preclasses classesA classesB preclasses ->
  instance_method_ref_resolvable classesB preclasses caller c_nm m_nm m_desc.
intros classesA classesB preclasses caller c_nm m_nm m_desc [caller' c_nm' m_nm' m_desc' classes preclasses' classes' p o c m H m_resolve not_static] preserve only_add.
destruct (CP.preserve_resolve_method _ _ _ _ _ _ _ _ _ _ _ _ m_resolve preserve only_add) as [classesB' [pB [oB [HB m_resolve2]]]].
eapply mk_instance_method_ref_resolvable; eauto. 
Save.

Lemma preserve_static_field_ref_resolvable : forall classesA classesB preclasses caller c_nm f_nm f_ty,
  static_field_ref_resolvable classesA preclasses caller c_nm f_nm f_ty ->
  CP.preserve_old_classes classesA classesB ->
  CP.only_add_from_preclasses classesA classesB preclasses ->
  static_field_ref_resolvable classesB preclasses caller c_nm f_nm f_ty.
intros classesA classesB preclasses caller c_nm f_nm f_ty [caller' c_nm' f_nm' f_ty' classes preclasses' classes' p o c f H f_resolve f_static] preserve only_add.
destruct (CP.preserve_resolve_field _ _ _ _ _ _ _ _ _ _ _ _ f_resolve preserve only_add) as [classesB' [pB [oB [HB f_resolve2]]]].
eapply mk_static_field_ref_resolvable; eauto.
Save.

Lemma preserve_instance_field_ref_resolvable : forall classesA classesB preclasses caller c_nm f_nm f_ty,
  instance_field_ref_resolvable classesA preclasses caller c_nm f_nm f_ty ->
  CP.preserve_old_classes classesA classesB ->
  CP.only_add_from_preclasses classesA classesB preclasses ->
  instance_field_ref_resolvable classesB preclasses caller c_nm f_nm f_ty.
intros classesA classesB preclasses caller c_nm f_nm f_ty [caller' c_nm' f_nm' f_ty' classes preclasses' classes' p o c f H f_resolve not_static not_final] preserve only_add.
destruct (CP.preserve_resolve_field _ _ _ _ _ _ _ _ _ _ _ _ f_resolve preserve only_add) as [classesB' [pB [oB [HB f_resolve2]]]].
eapply mk_instance_field_ref_resolvable; eauto.
Save.

Lemma preserve_instantiatable_class_ref_resolvable : forall classesA classesB preclasses caller c_nm,
  instantiatable_class_ref_resolvable classesA preclasses caller c_nm ->
  CP.preserve_old_classes classesA classesB ->
  CP.only_add_from_preclasses classesA classesB preclasses ->
  instantiatable_class_ref_resolvable classesB preclasses caller c_nm.
intros classesA classesB preclasses caller c_nm  [caller' c_nm' classes preclasses' classes' p o c H c_resolve not_interface not_abstract] preserve only_add.
destruct (CP.preserve_resolve_class _ _ _ _ _ _ _ _ _ _ c_resolve preserve only_add) as [classesB' [pB [oB [HB [c_resolve2 _]]]]].
eapply mk_instantiatable_class_ref_resolvable; eauto.
Save.

Lemma preserve_class_ref_resolvable : forall classesA classesB preclasses caller c_nm,
  class_ref_resolvable classesA preclasses caller c_nm ->
  CP.preserve_old_classes classesA classesB ->
  CP.only_add_from_preclasses classesA classesB preclasses ->
  class_ref_resolvable classesB preclasses caller c_nm.
intros classesA classesB preclasses caller c_nm resolveA presv only_add. 
destruct resolveA as [caller c_nm classes preclasses classesA' p o c H resolveA]. 
destruct (CP.preserve_resolve_class _ _ _ _ _ _ _ _ _ _ resolveA presv only_add) as [classesB' [pB [oB [c_exB [resolveB X]]]]].
eapply mk_class_ref_resolvable; eauto.
Save.

Hint Resolve preserve_static_method_resolvable
             preserve_instance_special_method_resolvable
             preserve_instance_method_resolvable
             preserve_static_field_ref_resolvable
             preserve_instance_field_ref_resolvable
             preserve_instantiatable_class_ref_resolvable
             preserve_class_ref_resolvable.

Lemma preserve_all_resolvable_for_class : forall classesA classesB preclasses class,
  all_resolvable_for_class classesA preclasses class ->
  CP.preserve_old_classes classesA classesB ->
  CP.only_add_from_preclasses classesA classesB preclasses ->
  all_resolvable_for_class classesB preclasses class.
intros classesA classesB preclasses class all_rc preserve only_add. destruct all_rc. 
apply mk_all_resolvable_for_class; intros; firstorder eauto.
Save.

Hint Resolve preserve_all_resolvable_for_class. 

Lemma preserve_all_resolvable_and_verified : forall classesA classesB preclasses,
  all_resolvable_and_verified classesA preclasses ->
  CP.preserve_old_classes classesA classesB ->
  CP.only_add_from_preclasses classesA classesB preclasses ->
  all_resolvable_and_verified classesB preclasses.
intros classesA classesB preclasses all_randv preserve only_add.
destruct all_randv. 
apply mk_all_resolvable_and_verified; firstorder (subst; eauto).
Save.

Lemma instantiatable_class_ref_ok : forall classes preclasses nm class c_nm idx,
  all_resolvable_and_verified classes preclasses ->
  CP.Classpool.lookup (CP.classpool classes) nm = Some class ->
  C.ConstantPool.lookup (C.class_constantpool class) idx = Some (C.cpe_classref c_nm) ->
  ANN.ConstantPoolAdditional.lookup (snd (C.class_annotation class)) idx = Some (ANN.cpae_instantiable_class) ->
  exists classes', exists p, exists o, exists c, exists H,
    CP.resolve_class (C.class_name class) c_nm classes preclasses = CP.load_ok _ (classes':=classes') p o c H
    /\ C.class_interface c = false
    /\ C.class_abstract c = false
    /\ all_resolvable_and_verified classes' preclasses.
intros classes preclasses nm class c_nm idx [classes' preclasses' classes_ok _] nm_is_class cp_lookup cpa_lookup.
pose (X:=classes_ok _ _ nm_is_class). inversion_clear X.

destruct (classes_ok _ _ nm_is_class) as [class_randv _].
destruct class0_randv as [classes preclasses class0 _ _ _ _ ref_ok _ _].
change V.C.cpe_classref with C.cpe_classref in cp_lookup.
destruct (ref_ok _ _ cp_lookup) as [_ ref_ok']. pose (B:=ref_ok' cpa_lookup). generalize B. 
change E.R.C.class_name with C.class_name.
destruct 1 as [caller c_nm classes preclasses classes' p o c H resolve_ok c_not_interface c_not_abstract].
assert (all_randv':all_resolvable_and_verified classes' preclasses). 
 eapply preserve_all_resolvable_and_verified; eauto. 
exists classes'. exists p. exists o. exists c. exists H.  
 intuition;
 destruct all_randv' as [classes' preclasses classes_verified _];
 clear resolve_ok;
 destruct H as [c_ok [m_ok _]];
 destruct (classes_verified _ _ c_ok) as [c_all_randv c_verified]; simpl in *.
Save.
Implicit Arguments instantiatable_class_ref_ok [classes preclasses nm c_nm idx].


Module ResourceCodeVerifierBase.

Module B := B.
Module SYN := SYN.
Module CERT := CERT.
Module C := C.

Import CERT.
Import SYN.

Definition vcgen (class : C.class)
                 (method : C.method)
                 (certificate : Cert.t)
                 (pc : nat)
                 (op : C.opcode)
               : option formula
  := match op with
     | C.op_iconst _ =>
         Cert.lookup certificate (S pc)
     | C.op_new idx =>
         a <- Cert.lookup certificate (S pc);:
         ref <- C.ConstantPool.lookup (C.class_constantpool class) idx;:
         info <- ANN.ConstantPoolAdditional.lookup (snd (C.class_annotation class)) idx;:
         match ref, info with
         | C.cpe_classref cls_nm, ANN.cpae_instantiable_class =>
            ret (f_tensor (f_atom (R_new cls_nm)) a)
         | _, _ =>
            fail
         end
     | _ =>
         fail
     end.

Lemma cert_incl_vcgen : forall class method cert1 cert2 n op a,
  vcgen class method cert1 n op = Some a ->
  CERT.cert_incl cert1 cert2 ->
  vcgen class method cert2 n op = Some a.
intros class method cert1 cert2 pc op a vcgen_cert1 cert1_incl_cert2.
destruct op; first
 [discriminate
 |simpl in *; destruct (cert1_incl_cert2 (S pc)); try discriminate; assumption
 ].
Save.

End ResourceCodeVerifierBase.


Module Inner (RCV : CODE_VERIFIER with Module B := B
                                  with Module SYN := SYN
                                  with Module CERT := CERT
                                  with Module ANN := ANN
                                  with Module C := C
                                  with Module Base := ResourceCodeVerifierBase).

Import SYN.
Import CERT.
Import RCV.
Import RSEM.
Import RA.

Lemma resource_shuffle : forall used future total current newfuture realcurrent,
  used :*: future <: total ->
  current :*: newfuture <: future ->
  realcurrent <: current ->
  used :*: realcurrent :*: newfuture <: total.
intros used future total current newfuture realcurrent uf_t cn_f r_c.
eapply leq_trans.
 apply leq_refl. apply eq_symm. apply combine_assoc.
 eapply leq_trans.
  eapply combine_order.
   eapply leq_refl. eapply eq_refl.
   eapply leq_trans.
    eapply combine_order.
     apply r_c.
     eapply leq_refl. apply eq_refl.
    apply cn_f.
  assumption.
Save. 

Module E := Execution.Execution B RA C CP RT.

Inductive safe_current_frame : CP.cert_classpool -> RT.frame -> res -> Prop :=
| mk_safe_current_frame : forall classes op_stack lvars pc code method class res_assertion allowed_res cert,
    CP.Classpool.lookup (CP.classpool classes) (C.class_name class) = Some class ->
    safe_code class method cert code ->
    Cert.lookup cert pc = Some res_assertion ->
    sat allowed_res res_assertion ->
    safe_current_frame classes (RT.mkFrame op_stack lvars pc code class) allowed_res.


Inductive safe_state : CP.Preclasspool.t -> E.state -> Prop :=
| mk_safe_state : forall f fs classes preclasses heap statics used_res touse_res total_res,
   safe_current_frame classes f touse_res ->
   used_res :*: touse_res <: total_res ->
   all_resolvable_and_verified classes preclasses ->
   safe_state preclasses (RT.mkState (f::fs) classes heap statics (E.mkResInfo used_res total_res)).



Lemma exec_safe : forall preclasses s result,
  safe_state preclasses s ->
  E.exec preclasses s = result ->
    (exists s', E.cont s' = result /\ safe_state preclasses s')
  \/(exists s', exists v, E.stop s' v = result /\ safe_state preclasses s')
  \/(exists s', exists e, E.stop_exn s' e = result /\ safe_state preclasses s')
  \/E.wrong = result.
intros preclasses s result.
intros s_safe CODE.
destruct s_safe as [f fs classes preclasses heap statics used_res touse_res total_res f_safe res_ok].
simpl in CODE.
destruct f_safe as [classes op_stack lvars pc code method class res_assertion allowed_res cert class_exists code_safe pc_assertion assertion_sat].
destruct (safe_code_implies _ _ _ _ _ _ code_safe pc_assertion) as [op [assertion' [op_exists [op_vcgen pc_implies_assertion']]]].
replace (nth_error (RT.C.code_code code) pc) with (Some op) in CODE.
destruct op; try discriminate.

(* op_new *)
simpl in op_vcgen.
destruct (option_informative (Cert.lookup cert (S pc))) as [[a_Spc lookup_a_Spc] | no_a_Spc].
 rewrite lookup_a_Spc in op_vcgen.
 destruct (option_informative (C.ConstantPool.lookup (C.class_constantpool class) t)) as [[ref lookup_ref] | no_ref].
  (* reference was found in the constantpool *)
  rewrite lookup_ref in op_vcgen.
  simpl in op_vcgen. destruct ref; try discriminate.
  inversion op_vcgen. clear op_vcgen. subst assertion'.
  simpl in CODE.
  replace (RT.C.ConstantPool.lookup (RT.C.class_constantpool class) t) with (Some (C.cpe_classref t0)) in CODE.
  destruct (RT.CP.resolve_class (RT.C.class_name class) t0 classes preclasses) as [classes' preserved only_add c c_exists | classes' preserved only_add exn].
   (* class resolution succeeded *)
   destruct (bool_informative (RT.C.class_abstract c)) as [c_abstract | c_not_abstract].
    (* c is abstract *)
    rewrite c_abstract in CODE. Focus 2.
    (* c is not abstract *)
    rewrite c_not_abstract in CODE. destruct (bool_informative (RT.C.class_interface c)) as [c_interface | c_not_interface].
     (* c is interface *)
     Focus 2.
     (* c not interface *)
     match goal with _:match ?x with Twosig.pack2 _ _ _ => _ end = result |- _ => destruct x as [heap0 addr [H1 [H2 [H3 [H4 H5]]]]] end.
     left.
     match goal with _:E.cont ?s = result |- _ => exists s end. split.
      assumption.
      assert (sat allowed_res (f_tensor (f_atom (R_new t0)) a_Spc)).
       eapply implies_soundness; eassumption.
      simpl in H. destruct H as [r1 [r2 [r1r2_allowed [t0_r1 r2_aSpc]]]].
      eapply mk_safe_state.
       eapply mk_safe_current_frame.
        auto.
        eassumption.
        eassumption.
        apply r2_aSpc.
       eapply resource_shuffle; eauto. eapply leq_trans.
        eapply leq_refl. apply r_new_match.
        assumption.
   (* class resolution failed *)


setoid_rewrite (r_new_match t0).  
        
assumption.
     

     destruct (RT.heap_new (RT.preserve_cert_heap heap preserved t0 

  change C.class with RT.C.class in class.
  change C.B.Classname.t with RT.C.B.Classname.t in t0.
  change (C.ConstantPool.lookup (C.class_constantpool class) t = Some (C.cpe_classref t0))
    with (RT.C.ConstantPool.lookup (RT.C.class_constantpool class) t = Some (RT.C.cpe_classref t0)) in lookup_ref.

(* op_iconst *)
simpl in CODE.
simpl in op_vcgen.
left.
match goal with _:E.cont ?s = result |- _ => exists s end. split.
 assumption.
 eapply mk_safe_state.
  eapply mk_safe_current_frame; intuition.
   apply code_safe.
   apply op_vcgen.
   eapply implies_soundness; eassumption.
  assumption.

   






